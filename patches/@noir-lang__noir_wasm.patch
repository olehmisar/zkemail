diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index b36f6ed29020e44144e4aacddd3e0e2327a16bb1..0000000000000000000000000000000000000000
diff --git a/build/cjs/package.json b/build/cjs/package.json
deleted file mode 100644
index caf9c5d61a8d1662de8e90eccdbb2a774a4166cf..0000000000000000000000000000000000000000
diff --git a/build/esm/package.json b/build/esm/package.json
deleted file mode 100644
index 63ce43c7e0c1d1afd230e1bda535953cdc682727..0000000000000000000000000000000000000000
diff --git a/dist/web/main.mjs b/dist/web/main.mjs
index 8dcefe1f0f330cb1941292351bd1d00b875fdeb3..db6fb7efd45cfcb4f96ef9082a03674cb6a37258 100644
--- a/dist/web/main.mjs
+++ b/dist/web/main.mjs
@@ -8753,7 +8753,7 @@ class Volume {
         const steps = pathToSteps(id as PathLike);
         let link = this.getLink(steps);
         if (link) return link.getNode();
-  
+
         // Try creating a node if not found.
         if (flags & O_CREAT) {
           const dirLink = this.getLinkParent(steps);
@@ -8763,7 +8763,7 @@ class Volume {
             return link.getNode();
           }
         }
-  
+
         throw createError(ENOENT, 'getNodeByIdOrCreate', pathToFilename(id));
       }
     }
@@ -22686,7 +22686,7 @@ class GithubDependencyResolver {
     async resolveDependency(_pkg, dependency) {
         // TODO accept ssh urls?
         // TODO github authentication?
-        if (!('git' in dependency) || !dependency.git.startsWith('https://github.com')) {
+        if (!('git' in dependency)) {
             return null;
         }
         const archivePath = await this.#fetchZipFromGithub(dependency);
@@ -22697,9 +22697,9 @@ class GithubDependencyResolver {
         };
     }
     async #fetchZipFromGithub(dependency) {
-        if (!dependency.git.startsWith('https://github.com')) {
-            throw new Error('Only github dependencies are supported');
-        }
+        // if (!dependency.git.startsWith('https://github.com')) {
+        //     throw new Error('Only github dependencies are supported');
+        // }
         const url = resolveGithubCodeArchive(dependency, 'zip');
         const localArchivePath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)('archives', safeFilename(url.pathname));
         // TODO should check signature before accepting any file
@@ -22768,14 +22768,16 @@ function safeFilename(val) {
  * @returns The URL to the library archive
  */
 function resolveGithubCodeArchive(dependency, format) {
-    const gitUrl = new URL(dependency.git);
-    const [owner, repo] = gitUrl.pathname.slice(1).split('/');
+    // const gitUrl = new URL(dependency.git);
+    // const [owner, repo] = gitUrl.pathname.slice(1).split('/').reverse();
     const ref = dependency.tag ?? 'HEAD';
     const extension = format === 'zip' ? 'zip' : 'tar.gz';
-    if (!owner || !repo || gitUrl.hostname !== 'github.com') {
-        throw new Error('Invalid Github repository URL');
-    }
-    return new URL(`https://github.com/${owner}/${repo}/archive/${ref}.${extension}`);
+    // if (!owner || !repo || gitUrl.hostname !== 'github.com') {
+    //     throw new Error('Invalid Github repository URL');
+    // }
+    const gitUrl = dependency.git.endsWith('/') ? dependency.git.slice(0, -1) : dependency.git;
+    const replacedUrl = gitUrl.replace('https://github.com', `${window.location.origin}/api/proxy/github`)
+    return new URL(`${replacedUrl}/archive/${ref}.${extension}`);
 }
 
 
@@ -23044,9 +23046,9 @@ class NoirWasmCompiler {
      * @param projectPath - The path to the project
      * @param opts - Compilation options
      */
-    static async new(fileManager, projectPath, 
+    static async new(fileManager, projectPath,
     /* eslint-disable @typescript-eslint/no-explicit-any */
-    wasmCompiler, sourceMap, 
+    wasmCompiler, sourceMap,
     /* eslint-enable @typescript-eslint/no-explicit-any */
     opts) {
         // Assume the filemanager is initialized at the project root
@@ -23447,22 +23449,22 @@ function inflate(data, buf) {
 	var u8=Uint8Array;
 	if(data[0]==3 && data[1]==0) return (buf ? buf : new u8(0));
 	var bitsF = _bitsF, bitsE = _bitsE, decodeTiny = _decodeTiny, get17 = _get17;
-	
+
 	var noBuf = (buf==null);
 	if(noBuf) buf = new u8((data.length>>>2)<<3);
-	
-	var BFINAL=0, BTYPE=0, HLIT=0, HDIST=0, HCLEN=0, ML=0, MD=0; 	
+
+	var BFINAL=0, BTYPE=0, HLIT=0, HDIST=0, HCLEN=0, ML=0, MD=0;
 	var off = 0, pos = 0;
 	var lmap, dmap;
-	
-	while(BFINAL==0) {		
+
+	while(BFINAL==0) {
 		BFINAL = bitsF(data, pos  , 1);
 		BTYPE  = bitsF(data, pos+1, 2);  pos+=3;
 		//console.log(BFINAL, BTYPE);
-		
+
 		if(BTYPE==0) {
 			if((pos&7)!=0) pos+=8-(pos&7);
-			var p8 = (pos>>>3)+4, len = data[p8-4]|(data[p8-3]<<8);  //console.log(len);//bitsF(data, pos, 16), 
+			var p8 = (pos>>>3)+4, len = data[p8-4]|(data[p8-3]<<8);  //console.log(len);//bitsF(data, pos, 16),
 			if(noBuf) buf=_check(buf, off+len);
 			buf.set(new u8(data.buffer, data.byteOffset+p8, len), off);
 			//for(var i=0; i<len; i++) buf[off+i] = data[p8+i];
@@ -23472,25 +23474,25 @@ function inflate(data, buf) {
 		if(noBuf) buf=_check(buf, off+(1<<17));  // really not enough in many cases (but PNG and ZIP provide buffer in advance)
 		if(BTYPE==1) {  lmap = U.flmap;  dmap = U.fdmap;  ML = (1<<9)-1;  MD = (1<<5)-1;   }
 		if(BTYPE==2) {
-			HLIT  = bitsE(data, pos   , 5)+257;  
-			HDIST = bitsE(data, pos+ 5, 5)+  1;  
+			HLIT  = bitsE(data, pos   , 5)+257;
+			HDIST = bitsE(data, pos+ 5, 5)+  1;
 			HCLEN = bitsE(data, pos+10, 4)+  4;  pos+=14;
 			for(var i=0; i<38; i+=2) {  U.itree[i]=0;  U.itree[i+1]=0;  }
 			var tl = 1;
 			for(var i=0; i<HCLEN; i++) {  var l=bitsE(data, pos+i*3, 3);  U.itree[(U.ordr[i]<<1)+1] = l;  if(l>tl)tl=l;  }     pos+=3*HCLEN;  //console.log(itree);
 			makeCodes(U.itree, tl);
 			codes2map(U.itree, tl, U.imap);
-			
+
 			lmap = U.lmap;  dmap = U.dmap;
-			
+
 			pos = decodeTiny(U.imap, (1<<tl)-1, HLIT+HDIST, data, pos, U.ttree);
 			var mx0 = _copyOut(U.ttree,    0, HLIT , U.ltree);  ML = (1<<mx0)-1;
 			var mx1 = _copyOut(U.ttree, HLIT, HDIST, U.dtree);  MD = (1<<mx1)-1;
-			
+
 			//var ml = decodeTiny(U.imap, (1<<tl)-1, HLIT , data, pos, U.ltree); ML = (1<<(ml>>>24))-1;  pos+=(ml&0xffffff);
 			makeCodes(U.ltree, mx0);
 			codes2map(U.ltree, mx0, lmap);
-			
+
 			//var md = decodeTiny(U.imap, (1<<tl)-1, HDIST, data, pos, U.dtree); MD = (1<<(md>>>24))-1;  pos+=(md&0xffffff);
 			makeCodes(U.dtree, mx1);
 			codes2map(U.dtree, mx1, dmap);
@@ -23498,24 +23500,24 @@ function inflate(data, buf) {
 		//var ooff=off, opos=pos;
 		while(true) {
 			var code = lmap[get17(data, pos) & ML];  pos += code&15;
-			var lit = code>>>4;  //U.lhst[lit]++;  
+			var lit = code>>>4;  //U.lhst[lit]++;
 			if((lit>>>8)==0) {  buf[off++] = lit;  }
 			else if(lit==256) {  break;  }
 			else {
 				var end = off+lit-254;
 				if(lit>264) { var ebs = U.ldef[lit-257];  end = off + (ebs>>>3) + bitsE(data, pos, ebs&7);  pos += ebs&7;  }
 				//dst[end-off]++;
-				
+
 				var dcode = dmap[get17(data, pos) & MD];  pos += dcode&15;
 				var dlit = dcode>>>4;
 				var dbs = U.ddef[dlit], dst = (dbs>>>4) + bitsF(data, pos, dbs&15);  pos += dbs&15;
-				
+
 				//var o0 = off-dst, stp = Math.min(end-off, dst);
 				//if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else
 				//if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else
 				//if(dst==1) buf.fill(buf[off-1], off, end);  else
 				if(noBuf) buf=_check(buf, off+(1<<17));
-				while(off<end) {  buf[off]=buf[off++-dst];    buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  }   
+				while(off<end) {  buf[off]=buf[off++-dst];    buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  buf[off]=buf[off++-dst];  }
 				off=end;
 				//while(off!=end) {  buf[off]=buf[off++-dst];  }
 			}
@@ -23538,7 +23540,7 @@ function _decodeTiny(lmap, LL, len, data, pos, tree) {
 	var i = 0;
 	while(i<len) {
 		var code = lmap[get17(data, pos)&LL];  pos+=code&15;
-		var lit = code>>>4; 
+		var lit = code>>>4;
 		if(lit<=15) {  tree[i]=lit;  i++;  }
 		else {
 			var ll = 0, n = 0;
@@ -23567,19 +23569,19 @@ function _copyOut(src, off, len, tree) {
 function makeCodes(tree, MAX_BITS) {  // code, length
 	var max_code = tree.length;
 	var code, bits, n, i, len;
-	
+
 	var bl_count = U.bl_count;  for(var i=0; i<=MAX_BITS; i++) bl_count[i]=0;
 	for(i=1; i<max_code; i+=2) bl_count[tree[i]]++;
-	
+
 	var next_code = U.next_code;	// smallest code for each length
-	
+
 	code = 0;
 	bl_count[0] = 0;
 	for (bits = 1; bits <= MAX_BITS; bits++) {
 		code = (code + bl_count[bits-1]) << 1;
 		next_code[bits] = code;
 	}
-	
+
 	for (n = 0; n < max_code; n+=2) {
 		len = tree[n+1];
 		if (len != 0) {
@@ -23639,10 +23641,10 @@ const U = function(){
 		lits : new u32(15000),
 		strt : new u16(1<<16),
 		prev : new u16(1<<15)
-	};  
+	};
 } ();
 
-(function(){	
+(function(){
 	var len = 1<<15;
 	for(var i=0; i<len; i++) {
 		var x = i;
@@ -23652,11 +23654,11 @@ const U = function(){
 		x = (((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) << 8));
 		U.rev15[i] = (((x >>> 16) | (x << 16)))>>>17;
 	}
-	
+
 	function pushV(tgt, n, sv) {  while(n--!=0) tgt.push(0,sv);  }
-	
+
 	for(var i=0; i<32; i++) {  U.ldef[i]=(U.of0[i]<<3)|U.exb[i];  U.ddef[i]=(U.df0[i]<<4)|U.dxb[i];  }
-	
+
 	pushV(U.fltree, 144, 8);  pushV(U.fltree, 255-143, 9);  pushV(U.fltree, 279-255, 7);  pushV(U.fltree,287-279,8);
 	/*
 	var i = 0;
@@ -23668,13 +23670,13 @@ const U = function(){
 	makeCodes(U.fltree, 9);
 	codes2map(U.fltree, 9, U.flmap);
 	revCodes (U.fltree, 9);
-	
+
 	pushV(U.fdtree,32,5);
 	//for(i=0;i<32; i++) U.fdtree.push(0,5);
 	makeCodes(U.fdtree, 5);
 	codes2map(U.fdtree, 5, U.fdmap);
 	revCodes (U.fdtree, 5);
-	
+
 	pushV(U.itree,19,0);  pushV(U.ltree,286,0);  pushV(U.dtree,30,0);  pushV(U.ttree,320,0);
 	/*
 	for(var i=0; i< 19; i++) U.itree.push(0,0);
@@ -23693,7 +23695,7 @@ const crc = {
 				if (c & 1)  c = 0xedb88320 ^ (c >>> 1);
 				else        c = c >>> 1;
 			}
-			tab[n] = c;  }    
+			tab[n] = c;  }
 		return tab;  })(),
 	update : function(c, buf, off, len) {
 		for (var i=0; i<len; i++)  c = crc.table[(c ^ buf[off+i]) & 0xff] ^ (c >>> 8);
@@ -27240,7 +27242,7 @@ const Default = (
  */
 
 var Test                                           = bind
-	? /*#__PURE__*/bind.bind(test       )       
+	? /*#__PURE__*/bind.bind(test       )
 	: function (re) {
 		return function (string) {
 			return test.call(re, string);
@@ -27248,7 +27250,7 @@ var Test                                           = bind
 	};
 
 var Exec                                           = bind
-	? /*#__PURE__*/bind.bind(exec       )       
+	? /*#__PURE__*/bind.bind(exec       )
 	: function (re) {
 		return function (string) {
 			return exec.call(re, string);
@@ -27271,7 +27273,7 @@ var NT = /[\n\t]+/g;
 var ESCAPE = /\\./g;
 function graveAccentReplacer ($$        ) { return $$==='\\`' ? '`' : $$; }
 
-var includes = ''.includes       
+var includes = ''.includes
 	? function (that        , searchString        ) { return that.includes(searchString); }
 	: function (that        , searchString        ) { return that.indexOf(searchString)>-1; };
 
@@ -27285,12 +27287,12 @@ function RE (               template                      ) {
 	var index = 1;
 	var length = arguments.length;
 	while ( index!==length ) {
-		var value            
-			                       
-			                          
-			                             
-			                            
-			                         
+		var value
+
+
+
+
+
 		  = arguments[index];
 		if ( typeof value==='string' ) { source += value; }
 		else {
@@ -27521,18 +27523,18 @@ const newWeakMap = () => {
 	weakMap.set = weakMap.set;
 	return weakMap;
 };
-const target2keeper = /*#__PURE__*/newWeakMap()     
-	                                                                      
-	                                                                         
+const target2keeper = /*#__PURE__*/newWeakMap()
+
+
  ;
-const proxy2target = /*#__PURE__*/newWeakMap()     
-	                             
-	                                                 
-	                                                   
+const proxy2target = /*#__PURE__*/newWeakMap()
+
+
+
  ;
-const target2proxy = /*#__PURE__*/newWeakMap()     
-	                                                  
-	                                                   
+const target2proxy = /*#__PURE__*/newWeakMap()
+
+
  ;
 
 const handlers                       = /*#__PURE__*/assign$1(create$1(NULL), {
@@ -27615,14 +27617,14 @@ const deInline = /*#__PURE__*/map_del.bind(INLINES)
 const deSection = /*#__PURE__*/del.bind(SECTIONS)                                                  ;
 
 const isInline = /*#__PURE__*/map_has.bind(INLINES)                                                  ;
-const ofInline = /*#__PURE__*/get.bind(INLINES)     
-	                                                                          
-	                                                               
-	                                       
+const ofInline = /*#__PURE__*/get.bind(INLINES)
+
+
+
  ;
-const beInline = /*#__PURE__*/set.bind(INLINES)     
-	                                                                                  
-	                                                                       
+const beInline = /*#__PURE__*/set.bind(INLINES)
+
+
  ;
 const inline =                                                         (value   , mode                , looping         )    => {
 	if ( isArray$1(value) ) {
@@ -27687,7 +27689,7 @@ const fromPair = /*#__PURE__*/has.bind(pairs)
 const PAIR = true;
 
 const PlainTable = /*#__PURE__*/Null$1(class Table extends Null$1      {
-	                                
+
 	constructor (isDirect          , isInline$fromPair          ) {
 		super();
 		tables_add(this);
@@ -27699,7 +27701,7 @@ const PlainTable = /*#__PURE__*/Null$1(class Table extends Null$1      {
 });
 
 const OrderedTable = /*#__PURE__*/Null$1(class Table extends Null      {
-	                                
+
 	constructor (isDirect          , isInline$fromPair          ) {
 		super();
 		tables_add(this);
@@ -27986,28 +27988,28 @@ let usingBigInt                 = true;
 let IntegerMinNumber         = 0;
 let IntegerMaxNumber         = 0;
 
-              
-
-                                           
-	                 
-	                
-	                 
-	                
-	               
-	                
-	                  
-	                 
-	                  
-	                   
-  
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 const ANY       = {
 	test: () => true,
 };
-                       
-	                                                    
- 
+
+
+
 const Keys = class KeysRegExp extends RegExp$1                 {
-	                                   
+
 	constructor (keys                   ) {
 		super(`^${groupify(keys)}$`);
 		let maxLength = -1;
@@ -28032,7 +28034,7 @@ let disallowEmptyKey         ;
 //export const xob :boolean = true;
 let sError         ;
 let sFloat         ;
-                               
+
 let Table                  ;
 let allowLonger         ;
 let enableNull         ;
@@ -28042,7 +28044,7 @@ let disableDigit         ;
 const arrayTypes = new WeakMap$1           ();
 const arrayTypes_get = /*#__PURE__*/get.bind(arrayTypes)                                  ;
 const arrayTypes_set = /*#__PURE__*/set.bind(arrayTypes)                                     ;
-                                  
+
 const As = ()     => {
 	const as = (array       )        => {
 		const got = arrayTypes_get(array);
@@ -28080,16 +28082,16 @@ let
 	asLocalDates    ,
 	asLocalTimes    ;
 
-                  
 
-                                            
+
+
 let processor             = null;
 let each              = null;
-           
-	                                                                                                      
-	                                                                                                      
-	                                                                                                      
- 
+
+
+
+
+
 const collect_on = (tag        , array              , table              , key         )       => {
 	const _each = create$1(NULL)                                                                                                 ;
 	_each._linked = each;
@@ -28106,7 +28108,7 @@ const collect_on = (tag        , array              , table              , key
 };
 const collect_off = ()        => { throw throws(SyntaxError$1(`xOptions.tag is not enabled, but found tag syntax` + where(' at '))); };
 let collect                                                                                                                          = collect_off;
-                                                      
+
 const Process = ()          => {
 	if ( each ) {
 		const _processor = processor ;
@@ -28132,9 +28134,9 @@ const clear = ()       => {
 };
 
 const use = (specificationVersion         , multilineStringJoiner         , useBigInt         , keys         , xOptions          , argsMode                 )       => {
-	
+
 	ARGS_MODE = argsMode;
-	
+
 	let mixed         ;
 	switch ( specificationVersion ) {
 		case 1.0:
@@ -28165,11 +28167,11 @@ const use = (specificationVersion         , multilineStringJoiner         , useB
 			throw RangeError$1(`TOML.parse(,specificationVersion)`);
 	}
 	switchRegExp(specificationVersion);
-	
+
 	if ( typeof multilineStringJoiner==='string' ) { useWhatToJoinMultilineString = multilineStringJoiner; }
 	else if ( multilineStringJoiner===undefined$1 ) { useWhatToJoinMultilineString = null; }
 	else { throw TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE}multilineStringJoiner` : `,{ joiner }`})`); }
-	
+
 	if ( useBigInt===undefined$1 || useBigInt===true ) { usingBigInt = true; }
 	else if ( useBigInt===false ) { usingBigInt = false; }
 	else {
@@ -28181,13 +28183,13 @@ const use = (specificationVersion         , multilineStringJoiner         , useB
 			: IntegerMaxNumber = -( IntegerMinNumber = useBigInt ) - 1;
 	}
 	if ( !BigInt$1 && usingBigInt!==false ) { throw Error$1(`Can't work without TOML.parse(${ARGS_MODE ? `${ARGS_MODE},useBigInt` : `,{ bigint }`}) being set to false, because the host doesn't have BigInt support`); }
-	
+
 	if ( keys==null ) { KEYS$1 = ANY; }
 	else {
 		if ( !isKeys(keys) ) { throw TypeError$1(`TOML.parse(,{ keys })`); }
 		KEYS$1 = keys;
 	}
-	
+
 	if ( xOptions==null ) {
 		Table = PlainTable;
 		sError = allowLonger = enableNull = allowInlineTableMultilineAndTrailingCommaEvenNoComma = false;
@@ -28216,11 +28218,11 @@ const use = (specificationVersion         , multilineStringJoiner         , useB
 		}
 		else { collect = collect_off; }
 	}
-	
+
 	mixed
 		? asNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asIntegers = asOffsetDateTimes = asLocalDateTimes = asLocalDates = asLocalTimes = asMixed
 		: ( { asNulls, asStrings, asTables, asArrays, asBooleans, asFloats, asIntegers, asOffsetDateTimes, asLocalDateTimes, asLocalDates, asLocalTimes } = AS_TYPED );
-	
+
 };
 
 const isView = ArrayBuffer.isView;
@@ -28247,12 +28249,12 @@ const Symbol$1 = Symbol;
 
 const previous                = Symbol$1('previous')       ;
 
-              
-	                                
-		                                                  
-		                                                  
-	                  
-  
+
+
+
+
+
+
 
 const x =     (rootStack      )    => {
 	let stack        = rootStack;
@@ -28433,17 +28435,17 @@ const Datetime = /*#__PURE__*/( () => {
 	return freeze(Datetime);
 } )();
 
-                                        
-                                      
-                                      
-                                      
-                                      
-                                      
-                                       
-                                     
-                                            
-                             
-                             
+
+
+
+
+
+
+
+
+
+
+
 
 const Value = (ISOString        )        => ISOString.replace(ZERO, zeroReplacer).replace(DELIMITER_DOT, '');
 
@@ -28493,15 +28495,15 @@ const OffsetDateTime_set = (that :InstanceType<typeof OffsetDateTime>, start :nu
 	);///time
 };*///
 const OffsetDateTime = /*#__PURE__*/fpc(class OffsetDateTime extends Datetime {
-	
+
 	[OffsetDateTime_ISOString]        ;
 	[OffsetDateTime_value]       ;
-	
+
 	get [Symbol$1.toStringTag] () { return 'OffsetDateTime'         ; }
-	
+
 	         valueOf (                    )        { return this[OffsetDateTime_value]; }
 	toISOString (                    )         { return this[OffsetDateTime_ISOString]; }
-	
+
 	constructor (literal        ) {
 		validateLeap(literal) || throws(SyntaxError$1(`Invalid Offset Date-Time ${literal}` + where(' at ')));
 		const with60 = literal.startsWith('60', 17);
@@ -28517,7 +28519,7 @@ const OffsetDateTime = /*#__PURE__*/fpc(class OffsetDateTime extends Datetime {
 		this[OffsetDateTime_value] = ValueOFFSET(time, more);
 		return this;
 	}
-	
+
 	getUTCFullYear (                    )           { return OffsetDateTime_use(this).getUTCFullYear(); }
 	///get year () :FullYear { return OffsetDateTime_get(this, 0, 4); }
 	///set year (value :FullYear) { OffsetDateTime_set(this, 0, 4, value, true); }
@@ -28527,7 +28529,7 @@ const OffsetDateTime = /*#__PURE__*/fpc(class OffsetDateTime extends Datetime {
 	getUTCDate (                    )       { return OffsetDateTime_use(this).getUTCDate(); }
 	///get day () :Date { return OffsetDateTime_get(this, 8, 10); }
 	///set day (value :Date) { OffsetDateTime_set(this, 8, 10, value, true); }
-	
+
 	getUTCHours (                    )        { return OffsetDateTime_use(this).getUTCHours(); }
 	///get hour () :Hours { return OffsetDateTime_get(this, 11, 13); }
 	///set hour (value :Hours) { OffsetDateTime_set(this, 11, 13, value, true); }
@@ -28547,7 +28549,7 @@ const OffsetDateTime = /*#__PURE__*/fpc(class OffsetDateTime extends Datetime {
 	///set microsecond (value :Milliseconds)
 	///get nanosecond () :Milliseconds
 	///set nanosecond (value :Milliseconds)
-	
+
 	getUTCDay (                    )      { return OffsetDateTime_use(this).getUTCDay(); }
 	///get dayOfWeek () { return OffsetDateTime_use(this, this.getTimezoneOffset()*60000).getUTCDay() || 7; }
 	getTimezoneOffset (                    )                 {
@@ -28568,7 +28570,7 @@ const OffsetDateTime = /*#__PURE__*/fpc(class OffsetDateTime extends Datetime {
 		this[OffsetDateTime_value] = ValueOFFSET(value, '');
 		///return value;
 	}*/
-	
+
 });
 
 const LocalDateTime_ISOString                = Symbol$1('LocalDateTime_ISOString')       ;
@@ -28583,15 +28585,15 @@ const LocalDateTime_set = (that                                    , start
 	);
 };
 const LocalDateTime = /*#__PURE__*/fpc(class LocalDateTime extends Datetime {
-	
+
 	[LocalDateTime_ISOString]        ;
 	[LocalDateTime_value]       ;
-	
+
 	get [Symbol$1.toStringTag] () { return 'LocalDateTime'         ; }
-	
+
 	         valueOf (                   )        { return this[LocalDateTime_value]; }
 	toISOString (                   )         { return this[LocalDateTime_ISOString]; }
-	
+
 	constructor (literal        ) {
 		IS_LOCAL_DATETIME(literal) && validateLeap(literal) || throws(SyntaxError$1(`Invalid Local Date-Time ${literal}` + where(' at ')));
 		super();
@@ -28600,14 +28602,14 @@ const LocalDateTime = /*#__PURE__*/fpc(class LocalDateTime extends Datetime {
 		);
 		return this;
 	}
-	
+
 	getFullYear (                   )           { return LocalDateTime_get(this, 0, 4); }
 	setFullYear (                     value          )       { LocalDateTime_set(this, 0, 4, value); }
 	getMonth (                   )        { return LocalDateTime_get(this, 5, 7) - 1; }
 	setMonth (                     value       )       { LocalDateTime_set(this, 5, 7, value + 1); }
 	getDate (                   )       { return LocalDateTime_get(this, 8, 10); }
 	setDate (                     value      )       { LocalDateTime_set(this, 8, 10, value); }
-	
+
 	getHours (                   )        { return LocalDateTime_get(this, 11, 13); }
 	setHours (                     value       )       { LocalDateTime_set(this, 11, 13, value); }
 	getMinutes (                   )          { return LocalDateTime_get(this, 14, 16); }
@@ -28620,7 +28622,7 @@ const LocalDateTime = /*#__PURE__*/fpc(class LocalDateTime extends Datetime {
 			this[LocalDateTime_ISOString] = this[LocalDateTime_ISOString].slice(0, 19) + ( value ? ( '.' + ( '' + value ).padStart(3, '0') ).replace(DOT_ZERO, '') : '' )
 		);
 	}
-	
+
 });
 
 const LocalDate_ISOString                = Symbol$1('LocalDate_ISOString')       ;
@@ -28635,15 +28637,15 @@ const LocalDate_set = (that                                , start        , end
 	);
 };
 const LocalDate = /*#__PURE__*/fpc(class LocalDate extends Datetime {
-	
+
 	[LocalDate_ISOString]        ;
 	[LocalDate_value]       ;
-	
+
 	get [Symbol$1.toStringTag] () { return 'LocalDate'         ; }
-	
+
 	         valueOf (               )        { return this[LocalDate_value]; }
 	toISOString (               )         { return this[LocalDate_ISOString]; }
-	
+
 	constructor (literal        ) {
 		IS_LOCAL_DATE(literal) && validateLeap(literal) || throws(SyntaxError$1(`Invalid Local Date ${literal}` + where(' at ')));
 		super();
@@ -28652,14 +28654,14 @@ const LocalDate = /*#__PURE__*/fpc(class LocalDate extends Datetime {
 		);
 		return this;
 	}
-	
+
 	getFullYear (               )           { return LocalDate_get(this, 0, 4); }
 	setFullYear (                 value          )       { LocalDate_set(this, 0, 4, value); }
 	getMonth (               )        { return LocalDate_get(this, 5, 7) - 1; }
 	setMonth (                 value       )       { LocalDate_set(this, 5, 7, value + 1); }
 	getDate (               )       { return LocalDate_get(this, 8, 10); }
 	setDate (                 value      )       { LocalDate_set(this, 8, 10, value); }
-	
+
 });
 
 const LocalTime_ISOString                = Symbol$1('LocalTime_ISOString')       ;
@@ -28674,15 +28676,15 @@ const LocalTime_set = (that                                , start        , end
 	);
 };
 const LocalTime = /*#__PURE__*/fpc(class LocalTime extends Datetime {
-	
+
 	[LocalTime_ISOString]        ;
 	[LocalTime_value]       ;
-	
+
 	get [Symbol$1.toStringTag] () { return 'LocalTime'         ; }
-	
+
 	         valueOf (               )        { return this[LocalTime_value]; }
 	toISOString (               )         { return this[LocalTime_ISOString]; }
-	
+
 	constructor (literal        ) {
 		IS_LOCAL_TIME(literal) || throws(SyntaxError$1(`Invalid Local Time ${literal}` + where(' at ')));
 		super();
@@ -28691,7 +28693,7 @@ const LocalTime = /*#__PURE__*/fpc(class LocalTime extends Datetime {
 		);
 		return this;
 	}
-	
+
 	getHours (               )        { return LocalTime_get(this, 0, 2); }
 	setHours (                 value       )       { LocalTime_set(this, 0, 2, value); }
 	getMinutes (               )          { return LocalTime_get(this, 3, 5); }
@@ -28704,7 +28706,7 @@ const LocalTime = /*#__PURE__*/fpc(class LocalTime extends Datetime {
 			this[LocalTime_ISOString] = this[LocalTime_ISOString].slice(0, 8) + ( value ? ( '.' + ( '' + value ).padStart(3, '0') ).replace(DOT_ZERO, '') : '' )
 		);
 	}
-	
+
 });
 
 const parseInt$1 = parseInt;
@@ -29001,9 +29003,9 @@ const assignLiteralString = ( (table       , finalKey        , literal        )
 		}
 		lines[lines.length] = checkLiteralString(line);
 	}
-} )     
-	                                                                       
-	                                                                      
+} )
+
+
  ;
 
 const assignBasicString = ( (table       , finalKey        , literal        )         => {
@@ -29054,9 +29056,9 @@ const assignBasicString = ( (table       , finalKey        , literal        )
 		ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line + '\n') || throws(SyntaxError$1(`Bad multi-line basic string` + where(' at ')));
 		lines[lines.length] = line;
 	}
-} )     
-	                                                                       
-	                                                                      
+} )
+
+
  ;
 
 const KEYS = /*#__PURE__*/Null$1        (null);
@@ -29207,9 +29209,9 @@ const equalStaticArray = function * (            table       , finalKey        ,
 	}
 	inline===null || beInline(staticArray, inline);
 	return lineRest.replace(SYM_WHITESPACE, '');
-}     
-	                                                                   
-	                                                                  
+}
+
+
  ;
 
 const equalInlineTable = function * (            table       , finalKey        , lineRest        )    {
@@ -29260,12 +29262,12 @@ const equalInlineTable = function * (            table       , finalKey        ,
 		}
 	}
 	return lineRest.replace(SYM_WHITESPACE, '');
-}     
-	                                                                   
-	                                                                  
+}
+
+
  ;
 
-                                                                                              
+
 const ForComment = (lastInlineTable       , lineRest        )             => {
 	const { leadingKeys, finalKey, tag } = { lineRest } = KEY_VALUE_PAIR_exec_groups(parseKeys(lineRest));
 	return { table: prepareInlineTable(lastInlineTable, leadingKeys), finalKey, tag, lineRest };
@@ -29497,7 +29499,7 @@ const escape_multiline = (lines          , lineIndex        ) => {
 	}
 };
 
-                                                    
+
 const Lines = (lines                   )        => ( lines = [ '', ...lines ]          ).length===1 ? [ '', '' ] : lines         ;
 
 const multilineString = (lines       )                                                                                  => {
@@ -29541,7 +29543,7 @@ const float64Array = new Float64Array$1([ NaN$1 ]);
 const uint8Array = new Uint8Array$1(float64Array.buffer);
 const NaN_7 = uint8Array[7] ;
 
-const float = NaN_7===new Uint8Array$1(new Float64Array$1([ -NaN$1 ]).buffer)[7] 
+const float = NaN_7===new Uint8Array$1(new Float64Array$1([ -NaN$1 ]).buffer)[7]
 	? (value        ) => value
 		? value===Infinity ? 'inf' : value===_Infinity ? '-inf' : ensureFloat('' + value)
 		: value===value ? is(value, 0) ? '0.0' : '-0.0' : 'nan'
@@ -29559,22 +29561,22 @@ const literalString = (value        )                => `'${value}'`;
 const $Keys = (keys        )         => isAmazing(keys) ? keys.replace(FIRST, literalString) : keys==='null' ? `'null'` : keys;
 
 class TOMLSection extends Array$1         {
-	
+
 	                 document              ;
-	
+
 	constructor (document              ) {
 		super();
 		this.document = document;
 		return this;
 	}
-	
+
 	[Symbol$1.toPrimitive] () { return this.join(this.document.newline); }
-	
+
 	appendNewline () { this[this.length] = ''; }
 	        set appendLine (source        ) { this[this.length] = source; }
-	        set appendInline (source        ) { this[this.length - 1] += source; }   
+	        set appendInline (source        ) { this[this.length - 1] += source; }
 	        set appendInlineIf (source        ) { source && ( this[this.length - 1] += source ); }///
-	
+
 	* assignBlock                           (documentKeys_                   , sectionKeys_                  , table   , tableKeys                            )    {
 		const { document } = this;
 		const { newlineUnderHeader, newlineUnderSectionButPair } = document;
@@ -29648,7 +29650,7 @@ class TOMLSection extends Array$1         {
 			}
 		}
 	}
-	
+
 	        value (indent        , value                , returnValueKeysIfValueIsDottedTable         )                  {
 		switch ( typeof value ) {
 			case 'object':
@@ -29721,7 +29723,7 @@ class TOMLSection extends Array$1         {
 		}
 		return null;
 	}
-	
+
 	        singlelineArray (indent        , staticArray                      , inlineMode               ) {
 		const { length } = staticArray;
 		if ( length ) {
@@ -29748,7 +29750,7 @@ class TOMLSection extends Array$1         {
 		}
 		this.appendLine = indent + ']';
 	}
-	
+
 	        inlineTable (indent        , inlineTable                      ) {
 		const keys = getOwnPropertyNames(inlineTable);
 		if ( keys.length ) {
@@ -29794,7 +29796,7 @@ class TOMLSection extends Array$1         {
 			}
 		}
 	}
-	
+
 }
 
 const name2code = /*#__PURE__*/Null$1({
@@ -29810,11 +29812,11 @@ const { test: IS_INDENT } = theRegExp(/^[\t ]*$/);
 const return_false = () => false;
 
 class TOMLDocument extends Array$1              {
-	
+
 	         get ['constructor'] () { return Array$1; }
-	
+
 	0 = new TOMLSection(this);
-	
+
 	         asInteger                                          = return_false;
 	         newline                     = '';
 	         newlineUnderSection          = true;
@@ -29831,13 +29833,13 @@ class TOMLDocument extends Array$1              {
 	         multilineTableComma          ;
 	         preferCommentForThis          = false;
 	         $singlelineArray                ;
-	
+
 	constructor (options                  ) {
-		
+
 		super();
-		
+
 		if ( options==null ) { return this; }
-		
+
 		const { integer } = options;
 		if ( integer===undefined ) ;
 		else if ( integer===MAX_SAFE_INTEGER ) { this.asInteger = isSafeInteger; }
@@ -29848,7 +29850,7 @@ class TOMLDocument extends Array$1              {
 			this.asInteger = (number        ) => isSafeInteger(number) && min<=number && number<=max;
 		}
 		else { throw TypeError$1(`TOML.stringify(,{integer}) can only be number`); }
-		
+
 		const { newline } = options;
 		if ( newline===undefined ) ;
 		else if ( newline==='\n' || newline==='\r\n' ) { this.newline = newline; }
@@ -29857,12 +29859,12 @@ class TOMLDocument extends Array$1              {
 				? SyntaxError$1(`TOML.stringify(,{newline}) can only be valid TOML newline`)
 				: TypeError$1(`TOML.stringify(,{newline}) can only be string`);
 		}
-		
+
 		const { preferCommentFor } = options;
 		if ( preferCommentFor===undefined ) ;
 		else if ( preferCommentFor==='this' || preferCommentFor==='key' ) { this.preferCommentForThis = preferCommentFor==='this'; }
 		else { throw TypeError$1(`TOML.stringify(,{preferCommentFor) can only be 'key' or 'this'`); }
-		
+
 		const { [options.newlineAround || 'header']: around = name2code.header } = name2code;
 		this.newlineUnderSection = around>0;
 		this.newlineUnderSectionButPair = around===1 || around===2;
@@ -29870,7 +29872,7 @@ class TOMLDocument extends Array$1              {
 		this.newlineUnderPair = around>2;
 		this.newlineUnderPairButDotted = around===3;
 		this.newlineUnderDotted = around>3;
-		
+
 		const { indent } = options;
 		if ( indent===undefined ) ;
 		else if ( typeof indent==='string' ) {
@@ -29882,19 +29884,19 @@ class TOMLDocument extends Array$1              {
 			this.indent = ' '.repeat(indent);
 		}
 		else { throw TypeError$1(`TOML.stringify(,{indent}) can not be "${typeof indent}" type`); }
-		
+
 		const { T } = options;
 		if ( T===undefined ) ;
 		else if ( T===' ' || T==='t' || T==='T' ) { this.T = T; }
 		else { throw TypeError$1(`TOML.stringify(,{T}) can only be "T" or " " or "t"`); }
-		
+
 		const { Z } = options;
 		if ( Z===undefined ) ;
 		else if ( Z==='z' || Z==='Z' ) { this.Z = Z; }
 		else { throw TypeError$1(`TOML.stringify(,{Z}) can only be "Z" or "z"`); }
-		
+
 		if ( options.xNull ) { this.nullDisabled = false; }
-		
+
 		const { xBeforeNewlineInMultilineTable } = options;
 		if ( xBeforeNewlineInMultilineTable===undefined ) ;
 		else if ( xBeforeNewlineInMultilineTable==='' || xBeforeNewlineInMultilineTable===',' ) {
@@ -29902,7 +29904,7 @@ class TOMLDocument extends Array$1              {
 			this.multilineTableComma = !!xBeforeNewlineInMultilineTable;
 		}
 		else { throw TypeError$1(`TOML.stringify(,{xBeforeNewlineInMultilineTable}) can only be "" or ","`); }
-		
+
 		const $singlelineArray = options.forceInlineArraySpacing;
 		switch ( $singlelineArray ) {
 			case undefined:
@@ -29918,13 +29920,13 @@ class TOMLDocument extends Array$1              {
 					? RangeError$1(`array inline mode must be 0 | 1 | 2 | 3, not including ${$singlelineArray}`)
 					: TypeError$1(`array inline mode must be "number" type, not including ${$singlelineArray===null ? '"null"' : typeof $singlelineArray}`);
 		}
-		
+
 		return this;
-		
+
 	}
-	
+
 	appendSection () { return this[this.length] = new TOMLSection(this); }
-	
+
 }
 
 const linesFromStringify = new WeakSet$1                   ();
@@ -37006,7 +37008,7 @@ var pako = {
 /************************************************************************/
 /******/ // The module cache
 /******/ var __webpack_module_cache__ = {};
-/******/ 
+/******/
 /******/ // The require function
 /******/ function __webpack_require__(moduleId) {
 /******/ 	// Check if module is in cache
@@ -37020,20 +37022,20 @@ var pako = {
 /******/ 		loaded: false,
 /******/ 		exports: {}
 /******/ 	};
-/******/ 
+/******/
 /******/ 	// Execute the module function
 /******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
-/******/ 
+/******/
 /******/ 	// Flag the module as loaded
 /******/ 	module.loaded = true;
-/******/ 
+/******/
 /******/ 	// Return the exports of the module
 /******/ 	return module.exports;
 /******/ }
-/******/ 
+/******/
 /******/ // expose the modules object (__webpack_modules__)
 /******/ __webpack_require__.m = __webpack_modules__;
-/******/ 
+/******/
 /************************************************************************/
 /******/ /* webpack/runtime/compat get default export */
 /******/ (() => {
@@ -37046,7 +37048,7 @@ var pako = {
 /******/ 		return getter;
 /******/ 	};
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/define property getters */
 /******/ (() => {
 /******/ 	// define getter functions for harmony exports
@@ -37058,7 +37060,7 @@ var pako = {
 /******/ 		}
 /******/ 	};
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/global */
 /******/ (() => {
 /******/ 	__webpack_require__.g = (function() {
@@ -37070,7 +37072,7 @@ var pako = {
 /******/ 		}
 /******/ 	})();
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/harmony module decorator */
 /******/ (() => {
 /******/ 	__webpack_require__.hmd = (module) => {
@@ -37085,12 +37087,12 @@ var pako = {
 /******/ 		return module;
 /******/ 	};
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/hasOwnProperty shorthand */
 /******/ (() => {
 /******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/make namespace object */
 /******/ (() => {
 /******/ 	// define __esModule on exports
@@ -37101,7 +37103,7 @@ var pako = {
 /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
 /******/ 	};
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/node module decorator */
 /******/ (() => {
 /******/ 	__webpack_require__.nmd = (module) => {
@@ -37110,33 +37112,33 @@ var pako = {
 /******/ 		return module;
 /******/ 	};
 /******/ })();
-/******/ 
+/******/
 /******/ /* webpack/runtime/jsonp chunk loading */
 /******/ (() => {
 /******/ 	__webpack_require__.b = document.baseURI || self.location.href;
-/******/ 	
+/******/
 /******/ 	// object to store loaded and loading chunks
 /******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
 /******/ 	// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
 /******/ 	var installedChunks = {
 /******/ 		"main": 0
 /******/ 	};
-/******/ 	
+/******/
 /******/ 	// no chunk on demand loading
-/******/ 	
+/******/
 /******/ 	// no prefetching
-/******/ 	
+/******/
 /******/ 	// no preloaded
-/******/ 	
+/******/
 /******/ 	// no HMR
-/******/ 	
+/******/
 /******/ 	// no HMR manifest
-/******/ 	
+/******/
 /******/ 	// no on chunks loaded
-/******/ 	
+/******/
 /******/ 	// no jsonp function
 /******/ })();
-/******/ 
+/******/
 /************************************************************************/
 var __webpack_exports__ = {};
 // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
